#ifndef DYNSTACK_H
#define DYNSTACK_H
#include <cassert> //Provides assert
#include <cstdlib> //provides NULL and size_t
#include <iostream>
using namespace std;
template <class T>
class DynintStack
{
private:
struct StackNode
{
	T val;
	StackNode * next;
	};
StackNode * top;
public:
	DynintStack()
	{ top = 0;}
	~DynintStack();
	void push (T);
	void pop (T & );
	bool isEmpty();
	void displayList();
};
template <class T >
DynintStack<T>:: ~DynintStack()
{
StackNode * nodePtr, *nextNode;
while (nodePtr != NULL)
{
	nextNode= nodePtr->next;
	delete nodePtr;
	nodePtr = nextNode;
}
}
template <class T >
void DynintStack<T>::push(T num)
{
	StackNode *newNode;
	newNode = new StackNode;
	newNode -> val = num;
	
	if (isEmpty())
	{
		top = newNode;
		newNode ->next = 0;
	}
	else
	{
	newNode -> next = top;
	top = newNode;
	}
}
template <class T>
void DynintStack<T>::pop(T& num)
{
	StackNode * temp;
	if (isEmpty())
	{
		cout << "The stack is empty";
	}
	else 
	{
		num = top->val;
		temp=  top->next;
		delete top;
		top= temp;
	}
}
template <class T>
bool DynintStack <T>:: isEmpty()
{
if (!top)
{
return true;

}
else
return false;
}
template <class T>
void DynintStack<T>::displayList(bool x)
{
	StackNode * ptr;
	if (ptr != NULL)
	{
		for (int 1 = 1; ptr.length(); i++)
		cout <<ptr->val<< " ";
	}
	else 
		return 0;
	//Use the Recursion method to display items in the list

 }
#endif
